{
  "plywood_metadata": {
    "plywood_gallery_core_version": "0.0.11"
  },
  "plywood_content": {
    "Row 1": [
      {
        "image_path": "gallery_assets/Row_1_001_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"ticks\")\n\n# Load the example dataset for Anscombe&#39;s quartet\ndf = sns.load_dataset(\"anscombe\")\n\n# Show the results of a linear regression within each dataset\nsns.lmplot(\n    data=df, x=\"x\", y=\"y\", col=\"dataset\", hue=\"dataset\",\n    col_wrap=2, palette=\"muted\", ci=None,\n    height=4, scatter_kws={\"s\": 50, \"alpha\": 1}\n)"
      },
      {
        "image_path": "gallery_assets/Row_1_002_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"whitegrid\")\n\n# Load the example diamonds dataset\ndiamonds = sns.load_dataset(\"diamonds\")\n\n# Draw a scatter plot while assigning point colors and sizes to different\n# variables in the dataset\nf, ax = plt.subplots(figsize=(6.5, 6.5))\nsns.despine(f, left=True, bottom=True)\nclarity_ranking = [\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"]\nsns.scatterplot(x=\"carat\", y=\"price\",\n                hue=\"clarity\", size=\"depth\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                hue_order=clarity_ranking,\n                sizes=(1, 8), linewidth=0,\n                data=diamonds, ax=ax)"
      },
      {
        "image_path": "gallery_assets/Row_1_003_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n\n# Load an example dataset with long-form data\nfmri = sns.load_dataset(\"fmri\")\n\n# Plot the responses for different events and regions\nsns.lineplot(x=\"timepoint\", y=\"signal\",\n             hue=\"region\", style=\"event\",\n             data=fmri)"
      },
      {
        "image_path": "gallery_assets/Row_1_004_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\n\nsns.set_theme(style=\"darkgrid\")\ndf = sns.load_dataset(\"penguins\")\nsns.displot(\n    df, x=\"flipper_length_mm\", col=\"species\", row=\"sex\",\n    binwidth=3, height=3, facet_kws=dict(margin_titles=True),\n)"
      },
      {
        "image_path": "gallery_assets/Row_1_005_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"ticks\")\n\ndots = sns.load_dataset(\"dots\")\n\n# Define the palette as a list to specify exact values\npalette = sns.color_palette(\"rocket_r\")\n\n# Plot the lines on two facets\nsns.relplot(\n    data=dots,\n    x=\"time\", y=\"firing_rate\",\n    hue=\"coherence\", size=\"choice\", col=\"align\",\n    kind=\"line\", size_order=[\"T1\", \"T2\"], palette=palette,\n    height=5, aspect=.75, facet_kws=dict(sharex=False),\n)"
      },
      {
        "image_path": "gallery_assets/Row_1_006_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\npenguins = sns.load_dataset(\"penguins\")\n\n# Draw a nested barplot by species and sex\ng = sns.catplot(\n    data=penguins, kind=\"bar\",\n    x=\"species\", y=\"body_mass_g\", hue=\"sex\",\n    errorbar=\"sd\", palette=\"dark\", alpha=.6, height=6\n)\ng.despine(left=True)\ng.set_axis_labels(\"\", \"Body mass (g)\")\ng.legend.set_title(\"\")"
      },
      {
        "image_path": "gallery_assets/Row_1_007_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"ticks\", palette=\"pastel\")\n\n# Load the example tips dataset\ntips = sns.load_dataset(\"tips\")\n\n# Draw a nested boxplot to show bills by day and time\nsns.boxplot(x=\"day\", y=\"total_bill\",\n            hue=\"smoker\", palette=[\"m\", \"g\"],\n            data=tips)\nsns.despine(offset=10, trim=True)"
      }
    ],
    "Row 2": [
      {
        "image_path": "gallery_assets/Row_2_008_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the example tips dataset\ntips = sns.load_dataset(\"tips\")\n\n# Draw a nested violinplot and split the violins for easier comparison\nsns.violinplot(data=tips, x=\"day\", y=\"total_bill\", hue=\"smoker\",\n               split=True, inner=\"quart\", linewidth=1,\n               palette={\"Yes\": \"b\", \"No\": \".85\"})\nsns.despine(left=True)"
      },
      {
        "image_path": "gallery_assets/Row_2_009_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the brain networks dataset, select subset, and collapse the multi-index\ndf = sns.load_dataset(\"brain_networks\", header=[0, 1, 2], index_col=0)\n\nused_networks = [1, 5, 6, 7, 8, 12, 13, 17]\nused_columns = (df.columns\n                  .get_level_values(\"network\")\n                  .astype(int)\n                  .isin(used_networks))\ndf = df.loc[:, used_columns]\n\ndf.columns = df.columns.map(\"-\".join)\n\n# Compute a correlation matrix and convert to long-form\ncorr_mat = df.corr().stack().reset_index(name=\"correlation\")\n\n# Draw each cell as a scatter point with varying size and color\ng = sns.relplot(\n    data=corr_mat,\n    x=\"level_0\", y=\"level_1\", hue=\"correlation\", size=\"correlation\",\n    palette=\"vlag\", hue_norm=(-1, 1), edgecolor=\".7\",\n    height=10, sizes=(50, 250), size_norm=(-.2, .8),\n)\n\n# Tweak the figure to finalize\ng.set(xlabel=\"\", ylabel=\"\", aspect=\"equal\")\ng.despine(left=True, bottom=True)\ng.ax.margins(.02)\nfor label in g.ax.get_xticklabels():\n    label.set_rotation(90)\nfor artist in g.legend.legendHandles:\n    artist.set_edgecolor(\".7\")"
      },
      {
        "image_path": "gallery_assets/Row_2_010_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import numpy as np\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n\nrs = np.random.RandomState(11)\nx = rs.gamma(2, size=1000)\ny = -.5 * x + rs.normal(size=1000)\n\nsns.jointplot(x=x, y=y, kind=\"hex\", color=\"#4CB391\")"
      },
      {
        "image_path": "gallery_assets/Row_2_011_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"ticks\")\n\ndiamonds = sns.load_dataset(\"diamonds\")\n\nf, ax = plt.subplots(figsize=(7, 5))\nsns.despine(f)\n\nsns.histplot(\n    diamonds,\n    x=\"price\", hue=\"cut\",\n    multiple=\"stack\",\n    palette=\"light:m_r\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nax.xaxis.set_major_formatter(mpl.ticker.ScalarFormatter())\nax.set_xticks([500, 1000, 2000, 5000, 10000])"
      },
      {
        "image_path": "gallery_assets/Row_2_012_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"ticks\")\n\n# Initialize the figure with a logarithmic x axis\nf, ax = plt.subplots(figsize=(7, 6))\nax.set_xscale(\"log\")\n\n# Load the example planets dataset\nplanets = sns.load_dataset(\"planets\")\n\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"distance\", y=\"method\", data=planets,\n            whis=[0, 100], width=.6, palette=\"vlag\")\n\n# Add in points to show each observation\nsns.stripplot(x=\"distance\", y=\"method\", data=planets,\n              size=4, color=\".3\", linewidth=0)\n\n# Tweak the visual presentation\nax.xaxis.grid(True)\nax.set(ylabel=\"\")\nsns.despine(trim=True, left=True)"
      },
      {
        "image_path": "gallery_assets/Row_2_013_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"whitegrid\")\niris = sns.load_dataset(\"iris\")\n\n# \"Melt\" the dataset to \"long-form\" or \"tidy\" representation\niris = pd.melt(iris, \"species\", var_name=\"measurement\")\n\n# Initialize the figure\nf, ax = plt.subplots()\nsns.despine(bottom=True, left=True)\n\n# Show each observation with a scatterplot\nsns.stripplot(\n    data=iris, x=\"value\", y=\"measurement\", hue=\"species\",\n    dodge=True, alpha=.25, zorder=1, legend=False\n)\n\n# Show the conditional means, aligning each pointplot in the\n# center of the strips by adjusting the width allotted to each\n# category (.8 by default) by the number of hue levels\nsns.pointplot(\n    data=iris, x=\"value\", y=\"measurement\", hue=\"species\",\n    join=False, dodge=.8 - .8 / 3, palette=\"dark\",\n    markers=\"d\", scale=.75, errorbar=None\n)\n\n# Improve the legend\nsns.move_legend(\n    ax, loc=\"lower right\", ncol=3, frameon=True, columnspacing=1, handletextpad=0\n)"
      },
      {
        "image_path": "gallery_assets/Row_2_014_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"ticks\")\n\n# Load the planets dataset and initialize the figure\nplanets = sns.load_dataset(\"planets\")\ng = sns.JointGrid(data=planets, x=\"year\", y=\"distance\", marginal_ticks=True)\n\n# Set a log scaling on the y axis\ng.ax_joint.set(yscale=\"log\")\n\n# Create an inset legend for the histogram colorbar\ncax = g.figure.add_axes([.15, .55, .02, .2])\n\n# Add the joint and marginal histogram plots\ng.plot_joint(\n    sns.histplot, discrete=(True, False),\n    cmap=\"light:#03012d\", pmax=.8, cbar=True, cbar_ax=cax\n)\ng.plot_marginals(sns.histplot, element=\"step\", color=\"#03012d\")"
      }
    ],
    "Row 3": [
      {
        "image_path": "gallery_assets/Row_3_015_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"ticks\")\n\n# Load the penguins dataset\npenguins = sns.load_dataset(\"penguins\")\n\n# Show the joint distribution using kernel density estimation\ng = sns.jointplot(\n    data=penguins,\n    x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\",\n    kind=\"kde\",\n)"
      },
      {
        "image_path": "gallery_assets/Row_3_016_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)})\n\n# Create the data\nrs = np.random.RandomState(1979)\nx = rs.randn(500)\ng = np.tile(list(\"ABCDEFGHIJ\"), 50)\ndf = pd.DataFrame(dict(x=x, g=g))\nm = df.g.map(ord)\ndf[\"x\"] += m\n\n# Initialize the FacetGrid object\npal = sns.cubehelix_palette(10, rot=-.25, light=.7)\ng = sns.FacetGrid(df, row=\"g\", hue=\"g\", aspect=15, height=.5, palette=pal)\n\n# Draw the densities in a few steps\ng.map(sns.kdeplot, \"x\",\n      bw_adjust=.5, clip_on=False,\n      fill=True, alpha=1, linewidth=1.5)\ng.map(sns.kdeplot, \"x\", clip_on=False, color=\"w\", lw=2, bw_adjust=.5)\n\n# passing color=None to refline() uses the hue mapping\ng.refline(y=0, linewidth=2, linestyle=\"-\", color=None, clip_on=False)\n\n\n# Define and use a simple function to label the plot in axes coordinates\ndef label(x, color, label):\n    ax = plt.gca()\n    ax.text(0, .2, label, fontweight=\"bold\", color=color,\n            ha=\"left\", va=\"center\", transform=ax.transAxes)\n\n\ng.map(label, \"x\")\n\n# Set the subplots to overlap\ng.figure.subplots_adjust(hspace=-.25)\n\n# Remove axes details that don&#39;t play well with overlap\ng.set_titles(\"\")\ng.set(yticks=[], ylabel=\"\")\ng.despine(bottom=True, left=True)"
      },
      {
        "image_path": "gallery_assets/Row_3_017_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\ndiamonds = sns.load_dataset(\"diamonds\")\nclarity_ranking = [\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"]\n\nsns.boxenplot(x=\"clarity\", y=\"carat\",\n              color=\"b\", order=clarity_ranking,\n              scale=\"linear\", data=diamonds)"
      },
      {
        "image_path": "gallery_assets/Row_3_018_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"dark\")\n\n# Simulate data from a bivariate Gaussian\nn = 10000\nmean = [0, 0]\ncov = [(2, .4), (.4, .2)]\nrng = np.random.RandomState(0)\nx, y = rng.multivariate_normal(mean, cov, n).T\n\n# Draw a combo histogram and scatterplot with density contours\nf, ax = plt.subplots(figsize=(6, 6))\nsns.scatterplot(x=x, y=y, s=5, color=\".15\")\nsns.histplot(x=x, y=y, bins=50, pthresh=.1, cmap=\"mako\")\nsns.kdeplot(x=x, y=y, levels=5, color=\"w\", linewidths=1)"
      },
      {
        "image_path": "gallery_assets/Row_3_019_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n\n# Load the example Titanic dataset\ndf = sns.load_dataset(\"titanic\")\n\n# Make a custom palette with gendered colors\npal = dict(male=\"#6495ED\", female=\"#F08080\")\n\n# Show the survival probability as a function of age and sex\ng = sns.lmplot(x=\"age\", y=\"survived\", col=\"sex\", hue=\"sex\", data=df,\n               palette=pal, y_jitter=.02, logistic=True, truncate=False)\ng.set(xlim=(0, 80), ylim=(-.05, 1.05))"
      },
      {
        "image_path": "gallery_assets/Row_3_020_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"ticks\")\n\n# Create a dataset with many short random walks\nrs = np.random.RandomState(4)\npos = rs.randint(-1, 2, (20, 5)).cumsum(axis=1)\npos -= pos[:, 0, np.newaxis]\nstep = np.tile(range(5), 20)\nwalk = np.repeat(range(20), 5)\ndf = pd.DataFrame(np.c_[pos.flat, step, walk],\n                  columns=[\"position\", \"step\", \"walk\"])\n\n# Initialize a grid of plots with an Axes for each walk\ngrid = sns.FacetGrid(df, col=\"walk\", hue=\"walk\", palette=\"tab20c\",\n                     col_wrap=4, height=1.5)\n\n# Draw a horizontal line to show the starting point\ngrid.refline(y=0, linestyle=\":\")\n\n# Draw a line plot to show the trajectory of each random walk\ngrid.map(plt.plot, \"step\", \"position\", marker=\"o\")\n\n# Adjust the tick positions and labels\ngrid.set(xticks=np.arange(5), yticks=[-3, 3],\n         xlim=(-.5, 4.5), ylim=(-3.5, 3.5))\n\n# Adjust the arrangement of the plots\ngrid.fig.tight_layout(w_pad=1)"
      },
      {
        "image_path": "gallery_assets/Row_3_021_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "from string import ascii_letters\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"white\")\n\n# Generate a large random dataset\nrs = np.random.RandomState(33)\nd = pd.DataFrame(data=rs.normal(size=(100, 26)),\n                 columns=list(ascii_letters[26:]))\n\n# Compute the correlation matrix\ncorr = d.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})"
      }
    ],
    "Row 4": [
      {
        "image_path": "gallery_assets/Row_4_022_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"white\", color_codes=True)\nmpg = sns.load_dataset(\"mpg\")\n\n# Use JointGrid directly to draw a custom plot\ng = sns.JointGrid(data=mpg, x=\"mpg\", y=\"acceleration\", space=0, ratio=17)\ng.plot_joint(sns.scatterplot, size=mpg[\"horsepower\"], sizes=(30, 120),\n             color=\"g\", alpha=.6, legend=False)\ng.plot_marginals(sns.rugplot, height=1, color=\"g\", alpha=.6)"
      },
      {
        "image_path": "gallery_assets/Row_4_023_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"darkgrid\")\niris = sns.load_dataset(\"iris\")\n\n# Set up the figure\nf, ax = plt.subplots(figsize=(8, 8))\nax.set_aspect(\"equal\")\n\n# Draw a contour plot to represent each bivariate density\nsns.kdeplot(\n    data=iris.query(\"species != &#39;versicolor&#39;\"),\n    x=\"sepal_width\",\n    y=\"sepal_length\",\n    hue=\"species\",\n    thresh=.1,\n)"
      },
      {
        "image_path": "gallery_assets/Row_4_024_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the diamonds dataset\ndiamonds = sns.load_dataset(\"diamonds\")\n\n# Plot the distribution of clarity ratings, conditional on carat\nsns.displot(\n    data=diamonds,\n    x=\"carat\", hue=\"cut\",\n    kind=\"kde\", height=6,\n    multiple=\"fill\", clip=(0, None),\n    palette=\"ch:rot=-.25,hue=1,light=.75\",\n)"
      },
      {
        "image_path": "gallery_assets/Row_4_025_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"ticks\")\nmpg = sns.load_dataset(\"mpg\")\n\ncolors = (250, 70, 50), (350, 70, 50)\ncmap = sns.blend_palette(colors, input=\"husl\", as_cmap=True)\nsns.displot(\n    mpg,\n    x=\"displacement\", col=\"origin\", hue=\"model_year\",\n    kind=\"ecdf\", aspect=.75, linewidth=2, palette=cmap,\n)"
      },
      {
        "image_path": "gallery_assets/Row_4_026_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme()\n\n# Load the penguins dataset\npenguins = sns.load_dataset(\"penguins\")\n\n# Plot sepal width as a function of sepal_length across days\ng = sns.lmplot(\n    data=penguins,\n    x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\",\n    height=5\n)\n\n# Use more informative axis labels than are provided by default\ng.set_axis_labels(\"Snoot length (mm)\", \"Snoot depth (mm)\")"
      },
      {
        "image_path": "gallery_assets/Row_4_027_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"white\")\n\ndf = sns.load_dataset(\"penguins\")\n\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_upper(sns.scatterplot, s=15)\ng.map_lower(sns.kdeplot)\ng.map_diag(sns.kdeplot, lw=2)"
      },
      {
        "image_path": "gallery_assets/Row_4_028_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the example Titanic dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a grid to plot survival probability against several variables\ng = sns.PairGrid(titanic, y_vars=\"survived\",\n                 x_vars=[\"class\", \"sex\", \"who\", \"alone\"],\n                 height=5, aspect=.5)\n\n# Draw a seaborn pointplot onto each Axes\ng.map(sns.pointplot, scale=1.3, errwidth=4, color=\"xkcd:plum\")\ng.set(ylim=(0, 1))\nsns.despine(fig=g.fig, left=True)"
      }
    ],
    "Row 5": [
      {
        "image_path": "gallery_assets/Row_5_029_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the dataset\ncrashes = sns.load_dataset(\"car_crashes\")\n\n# Make the PairGrid\ng = sns.PairGrid(crashes.sort_values(\"total\", ascending=False),\n                 x_vars=crashes.columns[:-3], y_vars=[\"abbrev\"],\n                 height=10, aspect=.25)\n\n# Draw a dot plot using the stripplot function\ng.map(sns.stripplot, size=10, orient=\"h\", jitter=False,\n      palette=\"flare_r\", linewidth=1, edgecolor=\"w\")\n\n# Use the same x axis limits on all columns and add better labels\ng.set(xlim=(0, 25), xlabel=\"Crashes\", ylabel=\"\")\n\n# Use semantically meaningful titles for the columns\ntitles = [\"Total crashes\", \"Speeding crashes\", \"Alcohol crashes\",\n          \"Not distracted crashes\", \"No previous crashes\"]\n\nfor ax, title in zip(g.axes.flat, titles):\n\n    # Set a different title for each axes\n    ax.set(title=title)\n\n    # Make the grid horizontal instead of vertical\n    ax.xaxis.grid(False)\n    ax.yaxis.grid(True)\n\nsns.despine(left=True, bottom=True)"
      },
      {
        "image_path": "gallery_assets/Row_5_030_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"white\", context=\"talk\")\nrs = np.random.RandomState(8)\n\n# Set up the matplotlib figure\nf, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(7, 5), sharex=True)\n\n# Generate some sequential data\nx = np.array(list(\"ABCDEFGHIJ\"))\ny1 = np.arange(1, 11)\nsns.barplot(x=x, y=y1, palette=\"rocket\", ax=ax1)\nax1.axhline(0, color=\"k\", clip_on=False)\nax1.set_ylabel(\"Sequential\")\n\n# Center the data to make it diverging\ny2 = y1 - 5.5\nsns.barplot(x=x, y=y2, palette=\"vlag\", ax=ax2)\nax2.axhline(0, color=\"k\", clip_on=False)\nax2.set_ylabel(\"Diverging\")\n\n# Randomly reorder the data to make it qualitative\ny3 = rs.choice(y1, len(y1), replace=False)\nsns.barplot(x=x, y=y3, palette=\"deep\", ax=ax3)\nax3.axhline(0, color=\"k\", clip_on=False)\nax3.set_ylabel(\"Qualitative\")\n\n# Finalize the plot\nsns.despine(bottom=True)\nplt.setp(f.axes, yticks=[])\nplt.tight_layout(h_pad=2)"
      },
      {
        "image_path": "gallery_assets/Row_5_031_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"white\")\nrs = np.random.RandomState(50)\n\n# Set up the matplotlib figure\nf, axes = plt.subplots(3, 3, figsize=(9, 9), sharex=True, sharey=True)\n\n# Rotate the starting point around the cubehelix hue circle\nfor ax, s in zip(axes.flat, np.linspace(0, 3, 10)):\n\n    # Create a cubehelix colormap to use with kdeplot\n    cmap = sns.cubehelix_palette(start=s, light=1, as_cmap=True)\n\n    # Generate and plot a random bivariate dataset\n    x, y = rs.normal(size=(2, 50))\n    sns.kdeplot(\n        x=x, y=y,\n        cmap=cmap, fill=True,\n        clip=(-5, 5), cut=10,\n        thresh=0, levels=15,\n        ax=ax,\n    )\n    ax.set_axis_off()\n\nax.set(xlim=(-3.5, 3.5), ylim=(-3.5, 3.5))\nf.subplots_adjust(0, 0, 1, 1, .08, .08)"
      },
      {
        "image_path": "gallery_assets/Row_5_032_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"whitegrid\")\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(6, 15))\n\n# Load the example car crash dataset\ncrashes = sns.load_dataset(\"car_crashes\").sort_values(\"total\", ascending=False)\n\n# Plot the total crashes\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"total\", y=\"abbrev\", data=crashes,\n            label=\"Total\", color=\"b\")\n\n# Plot the crashes where alcohol was involved\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"alcohol\", y=\"abbrev\", data=crashes,\n            label=\"Alcohol-involved\", color=\"b\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 24), ylabel=\"\",\n       xlabel=\"Automobile collisions per billion miles\")\nsns.despine(left=True, bottom=True)"
      },
      {
        "image_path": "gallery_assets/Row_5_033_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the example exercise dataset\nexercise = sns.load_dataset(\"exercise\")\n\n# Draw a pointplot to show pulse as a function of three categorical factors\ng = sns.catplot(\n    data=exercise, x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\",\n    capsize=.2, palette=\"YlGnBu_d\", errorbar=\"se\",\n    kind=\"point\", height=6, aspect=.75,\n)\ng.despine(left=True)"
      },
      {
        "image_path": "gallery_assets/Row_5_034_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nsns.set_theme()\n\n# Generate an example radial datast\nr = np.linspace(0, 10, num=100)\ndf = pd.DataFrame({&#39;r&#39;: r, &#39;slow&#39;: r, &#39;medium&#39;: 2 * r, &#39;fast&#39;: 4 * r})\n\n# Convert the dataframe to long-form or \"tidy\" format\ndf = pd.melt(df, id_vars=[&#39;r&#39;], var_name=&#39;speed&#39;, value_name=&#39;theta&#39;)\n\n# Set up a grid of axes with a polar projection\ng = sns.FacetGrid(df, col=\"speed\", hue=\"speed\",\n                  subplot_kws=dict(projection=&#39;polar&#39;), height=4.5,\n                  sharex=False, sharey=False, despine=False)\n\n# Draw a scatterplot onto each axes in the grid\ng.map(sns.scatterplot, \"theta\", \"r\")"
      },
      {
        "image_path": "gallery_assets/Row_5_035_Seaborn.png",
        "celltype": "Normal",
        "css": "border: 3px solid #007AB8;width:200px",
        "code": "import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n\ntips = sns.load_dataset(\"tips\")\ng = sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips,\n                  kind=\"reg\", truncate=False,\n                  xlim=(0, 60), ylim=(0, 12),\n                  color=\"m\", height=7)"
      }
    ]
  }
}